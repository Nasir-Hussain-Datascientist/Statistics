median_storage <- round(median(WaterRetaining$StorageLevel, na.rm = TRUE), 1) # in cubic meters
mean_storage <- round(mean(WaterRetaining$StorageLevel, na.rm = TRUE), 1) # in cubic meters
range_storage <- round(range(WaterRetaining$StorageLevel, na.rm = TRUE), 1) # in cubic meters
iqr_storage <- round(IQR(WaterRetaining$StorageLevel, na.rm = TRUE), 1) # in cubic meters
sd_storage <- round(sd(WaterRetaining$StorageLevel, na.rm = TRUE), 1) # in cubic meters
# Display the calculated statistics
list(median = paste(median_storage, "cubic meters"),
mean = paste(mean_storage, "cubic meters"),
range = paste(range_storage, "cubic meters"),
IQR = paste(iqr_storage, "cubic meters"),
SD = paste(sd_storage, "cubic meters"))
# Create a boxplot of the StorageLevel variable
boxplot(WaterRetaining$StorageLevel,
main = "Boxplot of Storage Level",
ylab = "Storage Level (units)",
col = "lightblue")
library(sp)
library(sf)  # For handling spatial data
# Create sf object
sf_points <- st_as_sf(WaterRetaining, coords = c("easting_m", "northing_m"))
# Check the structure and attributes of sf_points
st_geometry(sf_points)  # Check the geometry (should show POINT)
# Check the first few rows of sf_points to verify it's correct
head(sf_points)
# Calculate the mean dam height
mean_dam_height <- mean(WaterRetaining$DamHeight, na.rm = TRUE)
mean_dam_height
# Calculate weighted mean center using dam heights as weights
weighted_mean_center <- st_centroid(sf_points, weights = WaterRetaining$DamHeight)
# Extract coordinates of the weighted mean center
weighted_mean_center_coords <- st_coordinates(weighted_mean_center)
weighted_mean_center
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load the data from a CSV file into a dataframe named WaterRetaining
WaterRetaining <- read.csv("WaterRetainingFacilities.csv", sep = ",", header = TRUE)
# Calculate the mean DamHeight
mean_dam_height <- mean(WaterRetaining$DamHeight, na.rm = TRUE)
# Create a subset of dams with heights greater than the mean
subset_dams <- WaterRetaining %>% filter(DamHeight > mean_dam_height)
# Calculate the mean centers for the entire dataset and the subset
mean_center_all <- colMeans(WaterRetaining[, c("easting_m", "northing_m")], na.rm = TRUE)
mean_center_subset <- colMeans(subset_dams[, c("easting_m", "northing_m")], na.rm = TRUE)
# Plot the data
ggplot() +
geom_point(data = WaterRetaining, aes(x = easting_m, y = northing_m), color = 'blue', alpha = 0.5, label = "Original Data") +
geom_point(data = subset_dams, aes(x = easting_m, y = northing_m), color = 'red', alpha = 0.7, label = "Subset Data") +
geom_point(aes(x = mean_center_all[1], y = mean_center_all[2]), color = 'green', size = 3) +
geom_point(aes(x = mean_center_subset[1], y = mean_center_subset[2]), color = 'orange', size = 3) +
labs(title = "Switzerland Water Retaining Facilities Scatter Plot (Kabir Carpenter)",
x = "Easting (m)",
y = "Northing (m)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(aes(x = mean_center_all[1], y = mean_center_all[2], label = "Mean Center All"), hjust = 1.5, vjust = -1) +
geom_text(aes(x = mean_center_subset[1], y = mean_center_subset[2], label = "Mean Center Subset"), hjust = 1.5, vjust = -1)
# Calculate the standard deviation of easting and northing for the entire dataset
sd_easting_all <- sd(WaterRetaining$easting_m, na.rm = TRUE)
sd_northing_all <- sd(WaterRetaining$northing_m, na.rm = TRUE)
sd_all <- sqrt(sd_easting_all^2 + sd_northing_all^2)
sd_all <- round(sd_all, 1)
# Create subsets for Water Retaining Hydroelectric Facilities, Small Dam Heights, and Large Dam Heights
subset_hydroelectric <- WaterRetaining %>% filter(grepl("Hydroelectric", FacilityAim, ignore.case = TRUE))
subset_small_dams <- WaterRetaining %>% filter(DamHeight <= median(WaterRetaining$DamHeight, na.rm = TRUE))
subset_large_dams <- WaterRetaining %>% filter(DamHeight > median(WaterRetaining$DamHeight, na.rm = TRUE))
# Calculate standard deviation for each subset
sd_easting_hydro <- sd(subset_hydroelectric$easting_m, na.rm = TRUE)
sd_northing_hydro <- sd(subset_hydroelectric$northing_m, na.rm = TRUE)
sd_hydro <- sqrt(sd_easting_hydro^2 + sd_northing_hydro^2)
sd_hydro <- round(sd_hydro, 1)
sd_easting_small <- sd(subset_small_dams$easting_m, na.rm = TRUE)
sd_northing_small <- sd(subset_small_dams$northing_m, na.rm = TRUE)
sd_small <- sqrt(sd_easting_small^2 + sd_northing_small^2)
sd_small <- round(sd_small, 1)
sd_easting_large <- sd(subset_large_dams$easting_m, na.rm = TRUE)
sd_northing_large <- sd(subset_large_dams$northing_m, na.rm = TRUE)
sd_large <- sqrt(sd_easting_large^2 + sd_northing_large^2)
sd_large <- round(sd_large, 1)
# Print the calculated standard deviations
list(
sd_all = paste(sd_all, "meters"),
sd_hydro = paste(sd_hydro, "meters"),
sd_small = paste(sd_small, "meters"),
sd_large = paste(sd_large, "meters")
)
setwd("D:\datascience\Statistics")
setwd("D:\\datascience\\Statistics")
getwd()
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(tidyr)
# Load and clean data
exchange_data <- read.csv("Dollar-Exchange.csv")
# Convert Date to Date type
exchange_data$Date <- as.Date(exchange_data$Date, format = "%Y-%m-%d")
# Reshape to long format
exchange_long <- exchange_data %>%
pivot_longer(cols = -Date, names_to = "Currency", values_to = "ExchangeRate")
# Preview transformed data
head(exchange_long)
# Summary statistics
eda_summary <- exchange_long %>%
group_by(Currency) %>%
summarize(
Mean = mean(ExchangeRate, na.rm = TRUE),
Median = median(ExchangeRate, na.rm = TRUE),
SD = sd(ExchangeRate, na.rm = TRUE)
)
# Summary statistics
eda_summary <- exchange_long %>%
group_by(Currency) %>%
summarize(
Mean = mean(ExchangeRate, na.rm = TRUE),
Median = median(ExchangeRate, na.rm = TRUE),
SD = sd(ExchangeRate, na.rm = TRUE)
)
library(ggplot2)
# Filter for specific currencies
currencies_to_plot <- c("JPY=X", "INR=X", "CNY=X")
ggplot(exchange_long %>% filter(Currency %in% currencies_to_plot),
aes(x = Date, y = ExchangeRate, color = Currency)) +
geom_line() +
labs(title = "Exchange Rate Trends Against USD",
x = "Date", y = "Exchange Rate") +
theme_minimal()
ggplot(exchange_long %>% filter(Currency == "JPY=X"),
aes(x = ExchangeRate)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Exchange Rates for JPY",
x = "Exchange Rate", y = "Frequency") +
theme_minimal()
# Filter data for hypothesis testing
jpy <- exchange_long %>% filter(Currency == "JPY=X") %>% pull(ExchangeRate)
cny <- exchange_long %>% filter(Currency == "CNY=X") %>% pull(ExchangeRate)
# Perform t-test
t.test(jpy, cny, alternative = "two.sided")
library(dplyr)
library(tidyr)
# Load and clean data
exchange_data <- read.csv("Dollar-Exchange.csv")
# Convert Date to Date type
exchange_data$Date <- as.Date(exchange_data$Date, format = "%Y-%m-%d")
# Summary statistics
eda_summary <- exchange_long %>%
group_by(Currency) %>%
summarize(
Mean = mean(ExchangeRate, na.rm = TRUE),
Median = median(ExchangeRate, na.rm = TRUE),
SD = sd(ExchangeRate, na.rm = TRUE)
)
library(ggplot2)
# Filter for specific currencies
currencies_to_plot <- c("JPY=X", "INR=X", "CNY=X")
ggplot(exchange_long %>% filter(Currency %in% currencies_to_plot),
aes(x = Date, y = ExchangeRate, color = Currency)) +
geom_line() +
labs(title = "Exchange Rate Trends Against USD",
x = "Date", y = "Exchange Rate") +
theme_minimal()
ggplot(exchange_long %>% filter(Currency == "JPY=X"),
aes(x = ExchangeRate)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Exchange Rates for JPY",
x = "Exchange Rate", y = "Frequency") +
theme_minimal()
# Filter data for hypothesis testing
jpy <- exchange_long %>% filter(Currency == "JPY=X") %>% pull(ExchangeRate)
cny <- exchange_long %>% filter(Currency == "CNY=X") %>% pull(ExchangeRate)
# Perform t-test
t.test(jpy, cny, alternative = "two.sided")
house_data <- read.csv("data.csv")
# Show a sample of the data
library(knitr)
kable(head(house_data, 5), format = "markdown")
house_data <- read.csv("data.csv")
# Show a sample of the data
library(knitr)
kable(head(house_data, 1))
house_data <- read.csv("data.csv")
# Show a sample of the data
house_data
# Show a sample of the data
house_data <- read.csv("data.csv")
# Drop any unnecessary columns (e.g., "street", "statezip", "country")
house_data <- subset(house_data, select = -c(street, statezip, country))
library(knitr)
kable(head(house_data, 5), format = "markdown")
# Show a sample of the data
house_data <- read.csv("data.csv")
# Drop any unnecessary columns (e.g., "street", "statezip", "country")
house_data <- subset(house_data, select = -c(street, statezip, country))
library(knitr)
kable(head(house_data, 5), format = "markdown")
# Show a sample of the data
house_data <- read.csv("data")
# Show a sample of the data
house_data <- read.csv("data.csv")
# Drop any unnecessary columns (e.g., "street", "statezip", "country")
house_data <- subset(house_data, select = -c(street, statezip, country))
library(knitr)
kable(head(house_data, 5), format = "markdown")
house_data <- read.csv("data.csv")
# Show a sample of the data
# Drop any unnecessary columns (e.g., "street", "statezip", "country")
house_data <- subset(house_data, select = -c(street, statezip, country))
library(knitr)
kable(head(house_data, 5), format = "markdown")
# Distribution of house prices
library(ggplot2)
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
labs(title = "Distribution of House Prices", x = "Price (USD)", y = "Frequency")
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_continuous(labels = comma) +  # Format x-axis labels
labs(
title = "Distribution of House Prices",
x = "Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(binwidth = 100000, fill = "blue", color = "white") +
scale_x_continuous(labels = scales::comma) +
labs(
title = "Distribution of House Prices",
x = "Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 50) +
scale_x_continuous(labels = scales::comma) +
labs(
title = "Distribution of House Prices",
x = "Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Run the previous code to show the plot (no code here, just the plot)
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Run the previous code to show the plot (no code here, just the plot)
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Distribution of house prices with readable x-axis
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Distribution of house prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Save the plot to a file (e.g., "house_price_distribution.png")
ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
) +
ggsave("house_price_distribution.png", width = 8, height = 6)
## Code for Distribution of House Prices
```{r}
## Code for Distribution of House Prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
# Create the plot (but don't display it)
plot <- ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Save the plot to a file (e.g., "house_price_distribution.png")
ggsave("house_price_distribution.png", plot = plot, width = 8, height = 6)
house_data <- read.csv("data.csv")
# Show a sample of the data
# Drop any unnecessary columns (e.g., "street", "statezip", "country")
house_data <- subset(house_data, select = -c(street, statezip, country))
library(knitr)
kable(head(house_data, 2), format = "markdown")
## Code for Distribution of House Prices
# Ensure the scales package is loaded
library(ggplot2)
library(scales)
house_data <- read.csv('data.csv')
# Create the plot
plot <- ggplot(house_data, aes(x = price)) +
geom_histogram(fill = "blue", color = "white", bins = 30) +
scale_x_log10(labels = scales::comma) +  # Log scale on x-axis
labs(
title = "Distribution of House Prices (Log Scale)",
x = "Log of Price (USD)",
y = "Frequency"
)
# Save the plot to a file (e.g., "house_price_distribution.png")
ggsave("house_price_distribution.png", plot = plot, width = 8, height = 6)
# Scatter plot of price vs. square footage of living space
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Adding linear regression line
labs(
title = "Relationship Between House Price and Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
# Scatter plot of price vs. square footage of living space
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Adding linear regression line
labs(
title = "Relationship Between House Price and Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
)
# Scatter plot of price vs. square footage of living space
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Adding linear regression line
labs(
title = "Relationship Between House Price and Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
)
# Save the plot to a file (e.g., "house_price_distribution.png")
ggsave("Relationship Between House Price and Living Area.png", plot = plot, width = 8, height = 6)
# Scatter plot of price vs. square footage of living space
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Adding linear regression line
labs(
title = "Relationship Between House Price and Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
)
# Scatter plot of price vs. square footage of living space
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Adding linear regression line
labs(
title = "Relationship Between House Price and Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
) -> plot1
# Save the plot to a file
ggsave("price_vs_sqft_living.png", plot = plot1, width = 8, height = 6)
# Scatter plot of price vs. number of bedrooms
ggplot(house_data, aes(x = bedrooms, y = price)) +
geom_point(color = "green") +
labs(
title = "Price vs. Number of Bedrooms",
x = "Number of Bedrooms",
y = "Price (USD)"
) -> plot2
# Save the plot to a file
ggsave("price_vs_bedrooms.png", plot = plot2, width = 8, height = 6)
# Fit a simple linear regression model
lm_model <- lm(price ~ sqft_living, data = house_data)
# Summarize the model
summary(lm_model)
# Plot the regression line
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
title = "Linear Regression Model: Price vs. Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
) -> plot3
# Save the plot to a file
ggsave("price_vs_sqft_living_regression.png", plot = plot3, width = 8, height = 6)
# Fit a simple linear regression model
lm_model <- lm(price ~ sqft_living, data = house_data)
# Summarize the model
summary(lm_model)
# Plot the regression line
ggplot(house_data, aes(x = sqft_living, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
title = "Linear Regression Model: Price vs. Living Area",
x = "Square Footage (Living Area)",
y = "Price (USD)"
) -> plot3
# Save the plot to a file
ggsave("price_vs_sqft_living_regression.png", plot = plot3, width = 8, height = 6)
# Calculate and plot residuals of the linear regression model
house_data$residuals <- resid(lm_model)
ggplot(house_data, aes(x = sqft_living, y = residuals)) +
geom_point(color = "red") +
labs(
title = "Residuals of the Linear Regression Model",
x = "Square Footage (Living Area)",
y = "Residuals"
) -> plot4
# Save the plot to a file
ggsave("regression_residuals.png", plot = plot4, width = 8, height = 6)
# Fit a multiple linear regression model using multiple predictors
lm_multiple <- lm(price ~ sqft_living + bedrooms + bathrooms, data = house_data)
# Summarize the model
summary(lm_multiple)
# Predictions from the multiple regression model
house_data$predicted_price <- predict(lm_multiple, newdata = house_data)
ggplot(house_data, aes(x = predicted_price, y = price)) +
geom_point(color = "blue") +
labs(
title = "Predicted vs Actual Price",
x = "Predicted Price (USD)",
y = "Actual Price (USD)"
) -> plot5
# Save the plot to a file
ggsave("predicted_vs_actual_price.png", plot = plot5, width = 8, height = 6)
